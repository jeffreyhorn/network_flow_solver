[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "network-flow-solver"
version = "0.1.0"
description = "Pure Python implementation of the network simplex algorithm for minimum-cost flow problems"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Jeff", email = "jeff@example.com"}
]
keywords = [
    "network-flow",
    "network-simplex",
    "minimum-cost-flow",
    "optimization",
    "linear-programming",
    "operations-research"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Typing :: Typed"
]

dependencies = [
    "numpy>=1.26",
    "scipy>=1.11"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.1",
    "mypy>=1.0",
    "ruff>=0.1.0",
    "hypothesis>=6.88,<7"
]

# Platform-specific optional dependency for better sparse solver performance
umfpack = [
    "scikit-umfpack>=0.3.7; platform_system != 'Windows'"
]

# Tutorial and interactive notebook support
tutorial = [
    "jupyter>=1.0.0",
    "matplotlib>=3.5.0",
    "networkx>=3.0"
]

# All optional dependencies combined
all = [
    "network-flow-solver[dev,umfpack,tutorial]"
]

[project.urls]
Homepage = "https://github.com/jeffreyhorn/network_flow_solver"
Repository = "https://github.com/jeffreyhorn/network_flow_solver"
Issues = "https://github.com/jeffreyhorn/network_flow_solver/issues"
Documentation = "https://github.com/jeffreyhorn/network_flow_solver#readme"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["network_solver*"]

[tool.setuptools.package-data]
network_solver = ["py.typed"]

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q"
testpaths = ["tests"]
markers = [
    "slow: marks tests as relatively slow to run"
]

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true
disallow_incomplete_defs = true

[[tool.mypy.overrides]]
module = ["hypothesis.*", "scipy.*", "numpy.*"]
ignore_missing_imports = true

[tool.ruff]
line-length = 100
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "SIM", # flake8-simplify
]
ignore = [
    "E501",  # line too long (handled by formatter)
]

[tool.ruff.lint.per-file-ignores]
"tests/**/*.py" = [
    "D",    # pydocstyle - tests don't need full docstrings
    "S101", # assert - allowed in tests
]

[tool.coverage.run]
source = ["src/network_solver"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "if typing.TYPE_CHECKING:"
]
